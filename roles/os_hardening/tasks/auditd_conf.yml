---
- name: auditd.conf
  block:
    - name: auditd.conf -- include vars
      ansible.builtin.include_vars:
        file: vars_auditd_conf.yml

    - name: auditd_conf -- comment wrong config
      vars:
        pattern_list:
          regexp: "({{ exclude_pattern }}{{ include_pattern }})"
          label: "{{ item.key }} {{ item.value }}"

        esc_key: "{{ item.key | regex_escape() }}"
        esc_value: "{{ item.value | regex_escape() }}"
        exclude_pattern: '(?!^#)(?!^{{ esc_key }}\s*=\s*{{ esc_value }}(\s*#.*)?$)'
        include_pattern: '^{{ esc_key }}\b\s*.*$'

      block:
        - name: auditd_conf -- Building regex pattern to match wrong config
          ansible.builtin.set_fact:
            auditd_wrong_conf: "{{ (auditd_wrong_conf | default([])) + [pattern_list] }}"
          loop: "{{ auditd_conf }}"
          loop_control:
            label: "{{ item.key }} {{ item.value }}"

        - name: auditd_conf -- Commenting wrong config
          ansible.builtin.replace:
            path: "{{ auditd_conf_path }}"
            regexp: "{{ item.regexp }}"
            replace: '# Commented by Ansible\n# \1\n'
          loop: "{{ auditd_wrong_conf }}"
          loop_control:
            label: "{{ item.label }};\n    regexp: {{ item.regexp }}\n"

      rescue:
        - name: auditd_conf -- flush handlers
          ansible.builtin.meta: flush_handlers

        - name: auditd_conf -- caught error
          ansible.builtin.debug:
            msg: "Troubleshoot me"

    - name: auditd_conf -- writing correct config
      vars:
        pattern_list:
          regexp: '^{{ esc_key }}\s*=\s*{{ esc_value }}(\s*#.*)?$'
          line: "{{ item.key }} = {{ item.value }}"
          label: "{{ item.key }} = {{ item.value }}"

        esc_key: "{{ item.key | regex_escape() }}"
        esc_value: "{{ item.value | regex_escape() }}"

      block:
        - name: auditd_conf -- building regex pattern to check if configs exist
          ansible.builtin.set_fact:
            auditd_check_confs: "{{ (auditd_check_confs | default([])) + [pattern_list] }}"
          loop: "{{ auditd_conf }}"
          loop_control:
            label: "{{ item.key }} {{ item.value }}"

        - name: auditd_conf -- check if configs already exist
          ansible.builtin.lineinfile:
            path: "{{ auditd_conf_path }}"
            regexp: "{{ item.regexp }}"
            state: absent
          check_mode: true
          changed_when: false
          register: check_out
          loop: "{{ auditd_check_confs }}"
          loop_control:
            label: "{{ item.label }};\n    regexp: {{ item.regexp }}\n"

        - name: auditd_conf -- add missing config
          when: item.found | int == 0
          loop: "{{ check_out.results }}"
          loop_control:
            label: "{{ item.item.label }}"
          ansible.builtin.lineinfile:
            path: "{{ auditd_conf_path }}"
            line: "{{ item.item.line }}"

      rescue:
        - name: auditd_conf -- flush handlers
          ansible.builtin.meta: flush_handlers

        - name: auditd_conf -- caught error
          ansible.builtin.debug:
            msg: Troubleshoot me

  rescue:
    - name: auditd_conf -- flush handlers
      ansible.builtin.meta: flush_handlers

    - name: auditd_conf -- caught error
      ansible.builtin.debug:
        msg: Troubleshoot me
